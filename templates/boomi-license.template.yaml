AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy KubeSphere into a new EKS cluster in an existing VPC (qs-1r813c2mi).
Parameters:
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription:
      Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description:
      S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription:
      Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), dots(.) and forward slash (/).
    Default: quickstart-eks-boomi-molecule/
    Description:
      The S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), dots(.) and
      forward slash (/).
    Type: String
  QSS3BucketRegion:
    Default: "us-east-1"
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
    Type: String
  BoomiUsername:
    Description: The email account associated with the Boomi account.
    Type: String
    NoEcho: true
  BoomiPassword:
    Description: The password associated with the Boomi account.
    Type: String
    NoEcho: true
    Default: ""
  BoomiAccountID:
    Description: The Boomi account ID that you want to associate with the new Molecule cluster.
    Type: String
    NoEcho: true
  BoomiMFAInstallToken:
    Description: An MFA installation token generated by your Dell Boomi Administrator.
    Type: String
    NoEcho: true
    Default: ""
  BoomiMFAAPIToken:
    Description: An MFA API token generated by your Dell Boomi Administrator.
    Type: String
    NoEcho: true
    Default: ""
Rules:
  PasswordOrMFAToken:
    Assertions:
      - Assert: !Or
          - !And
            - !Equals [!Ref BoomiPassword, ""]
            - !And
              - !Not [!Equals [!Ref BoomiMFAInstallToken, ""]]
              - !Not [!Equals [!Ref BoomiMFAAPIToken, ""]]
          - !And
            - !Not [!Equals [!Ref BoomiPassword, ""]]
            - !And
              - !Equals [!Ref BoomiMFAInstallToken, ""]
              - !Equals [!Ref BoomiMFAAPIToken, ""]
        AssertDescription: You must supply either a password *or* an MFA installation and API token.
Conditions:
  InstallTokenProvided: !And
    - !Not [!Equals [!Ref BoomiMFAInstallToken, ""]]
    - !Not [!Equals [!Ref BoomiMFAAPIToken, ""]]
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, "aws-quickstart"]
Resources:
  BoomiVerifyLicense:
    Type: Custom::BoomiVerifyLicense
    Properties:
      ServiceToken: !GetAtt "BoomiVerifyLicenseFunction.Arn"
      BoomiUsername: !If
        - InstallTokenProvided
        - !Sub "BOOMI_TOKEN.${BoomiUsername}"
        - !Ref "BoomiUsername"
      BoomiPassword: !If
        - InstallTokenProvided
        - !Ref "BoomiMFAAPIToken"
        - !Ref "BoomiPassword"
      BoomiAccountID: !Ref "BoomiAccountID"
  BoomiVerifyLicenseFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Verifies account has available molecule licenses.
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt "BoomiAPIRole.Arn"
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          import urllib3
          import copy
          from botocore.vendored import requests
          def timeout(event, context):
            logging.error('Execution is about to time out, sending failure response to CloudFormation')
            cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def pull_container_id(whdata):
            whraw = json.loads(whdata)
            for k,v in whraw.items():
              if 'container_id' in v:
                cidraw = json.loads(v)
                container_id = cidraw['container_id']
                return container_id
          def verify_boomi_access(username, password, account):
              headers = {'Content-Type':'application/json', 'Accept':'application/json'}
              headers.update(urllib3.util.make_headers(basic_auth = f"{username}:{password}"))
              API_URL = f"https://api.boomi.com/api/rest/v1/{account}/Account/{account}"
              resp = requests.get(API_URL, headers=headers)
              jsonresp = resp.json()
              boomistatus = (jsonresp["status"])
              boomient = (jsonresp["licensing"]["enterprise"]["purchased"])
              boomientused = (jsonresp["licensing"]["enterprise"]["used"])
              if boomistatus == "active":
                  print( "Account active" )
              else:
                  logging.error('Exception: Boomi account is inactive')
                  status = cfnresponse.FAILED
              if boomient > boomientused:
                  print( "License available" )
              else:
                  logging.error('Exception: No enterprise license available')
                  status = cfnresponse.FAILED
          def handler(event, context):
            # make sure we send a failure to CloudFormation if the function
            # is going to timeout
            print("event:::{}".format(event))
            timer = threading.Timer((context.get_remaining_time_in_millis()
                      / 1000.00) - 0.5, timeout, args=[event, context])
            timer.start()
            sanitized_event = copy.deepcopy(event)
            sanitized_event['ResourceProperties']['BoomiPassword'] = "<Redacted>"
            print('Received event: %s' % json.dumps(sanitized_event))
            status = cfnresponse.SUCCESS
            try:
                username = event['ResourceProperties']['BoomiUsername']
                password = event['ResourceProperties']['BoomiPassword']
                account_id = event['ResourceProperties']['BoomiAccountID']
                if event['RequestType'] == 'Create':
                    verify_boomi_access(username, password, account_id)
            except Exception as e:
                logging.error('Exception: %s' % e, exc_info=True)
                status = cfnresponse.FAILED
            finally:
                timer.cancel()
                cfnresponse.send(event, context, status, {}, None)
  BoomiAPIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
